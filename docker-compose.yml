services:
  starlink-location:
    build: ./backend/starlink-location/
    container_name: starlink-location
    env_file: .env
    ports:
      - "${STARLINK_LOCATION_PORT}:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 2s
    volumes:
      - route_data:/data/routes
      - sim_route_data:/data/sim_routes
    networks:
      - starlink-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    env_file: .env
    ports:
      - "${PROMETHEUS_PORT}:9090"
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION}'
    depends_on:
      starlink-location:
        condition: service_healthy
    networks:
      - starlink-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file: .env
    ports:
      - "${GRAFANA_PORT}:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - starlink-net

networks:
  starlink-net:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  route_data:
  sim_route_data:
